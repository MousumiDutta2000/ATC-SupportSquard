"""
Django settings for dashboard project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
from django.contrib.messages import constants as messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dkc=a9%fx^rvl6@u5(6+akn)*pfm5#$hlce90u5b%*_b#w0i=-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',  # Django's admin site
    'django.contrib.auth',  # authentication framework
    'django.contrib.contenttypes',  # content types framework
    'django.contrib.sessions',  # session framework
    'django.contrib.messages',  # messaging framework
    'django.contrib.staticfiles',  # static files framework
    'django.contrib.sites',  # sites framework
    'ATCdash',  # custom app named ATCdash
    'allauth',  # authentication app
    'allauth.account',  # account management app
    'allauth.socialaccount',  # social authentication app
    'allauth.socialaccount.providers.google',  # Google OAuth 2.0 provider for allauth
    'allauth.socialaccount.providers.linkedin_oauth2',  # LinkedIn OAuth provider for allauth
    'allauth.socialaccount.providers.microsoft',  # Microsoft OAuth provider for allauth
    'rest_framework',  # Django REST framework
    'knox',  # token authentication for Django REST framework
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ('knox.auth.TokenAuthentication',),  # Use token authentication provided by knox package
    'DEFAULT_RENDERER_CLASSES': [  # Use these renderers to determine the response format
        'rest_framework.renderers.JSONRenderer',  # Serialize output to JSON format
        'rest_framework.renderers.AdminRenderer',  # Create an admin interface for the API
        'rest_framework.renderers.BrowsableAPIRenderer'  # Human-readable HTML view of the API endpoint
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # Use page number pagination
    'PAGE_SIZE': 100  # Set the page size to 100
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Default Django authentication backend
    'allauth.account.auth_backends.AuthenticationBackend'  # Authentication backend for allauth
]

SITE_ID = 2
LOGIN_REDIRECT_URL = '/'

# Additional configuration settings
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_QUERY_EMAIL = True
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_VERIFICATION = 'none'

SOCIALACCOUNT_PROVIDERS = {
    'google': {  # Google authentication provider
        'SCOPE': [
            'profile',  # Request access to the user's profile information
            'email',  # Request access to the user's email address
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',  # Request online access to the user's account
        }
    },
    'linkedin': {  # LinkedIn authentication provider
        'SCOPE': [
            'r_basicprofile',  # Request access to the user's basic profile information
            'r_emailaddress'  # Request access to the user's email address
        ],
        'PROFILE_FIELDS': [  # The fields to include in the user's profile data
            'id',
            'first-name',
            'last-name',
            'email-address',
            'picture-url',
            'public-profile-url',
        ]
    },
    'microsoft': {  # Microsoft authentication provider
        'SCOPE': ['User.Read'],  # Request access to the user's profile information
        'AUTH_PARAMS': {
            'prompt': 'select_account'  # Request that the user select their account during login
        },
        'METHOD': 'oauth2',  # Use OAuth 2.0 authentication
        'VERIFIED_EMAIL': True,  # Require email verification for Microsoft accounts
        'REDIRECT_URI': 'http://127.0.0.1:8000/accounts/microsoft/login/callback/'  # The URL to redirect to after authentication
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Adds various security-related HTTP headers to the response
    'django.contrib.sessions.middleware.SessionMiddleware',  # Provides session support for Django
    'django.middleware.common.CommonMiddleware',  # Provides several common middleware utilities
    'django.middleware.csrf.CsrfViewMiddleware',  # Provides CSRF protection for views that use POST requests
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Provides user authentication support
    'django.contrib.messages.middleware.MessageMiddleware',  # Provides support for Django's messaging framework
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Sets the X-Frame-Options header to prevent clickjacking attacks
]

ROOT_URLCONF = 'dashboard.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['ATCdash/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dashboard.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'notun',
        'USER': 'root',
        'PASSWORD': 'mariadb',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'ATCdash/statics'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
